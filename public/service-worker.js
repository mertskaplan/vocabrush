const CACHE_NAME = 'vocab-rush-v1';
const ASSETS_TO_CACHE = [
  '/',
  '/index.html',
  '/manifest.json',
  '/decks/animals.en.json',
  '/decks/objects.en.json',
  '/decks/food.tr.json',
  '/decks/places.tr.json',
  '/locales/en.json',
  '/locales/tr.json'
];
// Pre-cache assets that are generated by the build process
// We can't know the exact filenames, so we'll use a placeholder
// that the build process should replace. For this simulation,
// we'll assume a common pattern.
const DYNAMIC_ASSETS_PATTERN = /\.(js|css|svg|woff2)$/;
self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME).then((cache) => {
      console.log('Opened cache and caching static assets');
      // We can't know the build output filenames, so we cache the static JSONs and main pages.
      // The fetch handler will cache dynamic assets on the fly.
      return cache.addAll(ASSETS_TO_CACHE);
    })
  );
  self.skipWaiting();
});
self.addEventListener('activate', (event) => {
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (cacheName !== CACHE_NAME) {
            console.log('Deleting old cache:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
  self.clients.claim();
});
self.addEventListener('fetch', (event) => {
  // For navigation requests, use a network-first strategy to get the latest HTML.
  if (event.request.mode === 'navigate') {
    event.respondWith(
      fetch(event.request)
        .then(response => {
          // If fetch is successful, clone and cache the response
          if (response.ok) {
            const resClone = response.clone();
            caches.open(CACHE_NAME).then(cache => {
              cache.put(event.request, resClone);
            });
          }
          return response;
        })
        .catch(() => {
          // If network fails, serve the cached index.html
          return caches.match('/');
        })
    );
    return;
  }
  // For other requests (assets), use a cache-first strategy.
  event.respondWith(
    caches.match(event.request).then((response) => {
      if (response) {
        return response; // Serve from cache
      }
      // If not in cache, fetch from network, then cache it
      return fetch(event.request).then((networkResponse) => {
        if (networkResponse && networkResponse.status === 200) {
          const resClone = networkResponse.clone();
          caches.open(CACHE_NAME).then((cache) => {
            cache.put(event.request, resClone);
          });
        }
        return networkResponse;
      });
    })
  );
});